<?php

namespace Modules\Leave\Http\Controllers;

use App\Absence as AppAbsence;
use App\CalendarEvent;
use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use App\Http\Controllers\Admin\AdminController;
use App\Model\Absence;
use App\Model\TimeKeepingAllDay;
use App\TimekeepingNew;
use App\User;
use Carbon\Carbon;
use Carbon\CarbonPeriod;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB; 
use Modules\Leave\Entities\Leave;
use Illuminate\Support\Facades\Cache;

class LeaveController extends AdminController
{
    protected $view;
    protected $export;
    const KEYMENU = array(
        "view" => "Leave",
        "export" => "LeaveExport",
        "lock" => "LeaveLock",
    );

    const LEAVE_TIME_PER_MONTH = 8 * 3; //thời gian nghỉ phép tối đa trong 1 tháng
    const MID_MONTH_DAY = 15; //ngày giữa tháng
    const WORKING_HOURS_PER_DAY = 8; //số giờ làm việc trong 1 ngày
    const MINUS_PER_HOUR = 60; // số phút 1 giờ
    const TYPE_ABSENCE = ['VM001', 'VM002', 'VM003', 'VM004', 'VM005'];
    const NO_TIMEKEEPING = 1;
    const LATE_SOON = 2;

    public function __construct(Request $request)
    {
        parent::__construct($request);
        $this->middleware('auth');
        $array = $this->RoleView('Leave', ['Leave']);
        $this->menu = $array['menu'];
        foreach (self::KEYMENU as $key => $value) {
            foreach ($array['role'] as $row) {
                if ($value == $row->alias)
                    $this->$key = $row;
            }
        }
    }

    public function index(Request $request)
    {

        $validated = $request->validate([
            "users_search" => "nullable|array",
            "users_search.*" => "required|integer",
            "date" => "nullable|date_format:d/m/Y"
        ]);

        $users = $this->data["users"] = $this->GetListUser(self::USER_ACTIVE_FLAG);

        $allUserId = [];
        foreach($users as $userss){
            array_push($allUserId, $userss['id']);
        }

        $search_date = isset($validated["date"])
            ? Carbon::createFromFormat(self::FOMAT_DISPLAY_DMY, $validated["date"])
            : Carbon::now();

        //lấy ra id của user
        $user_select = isset($validated["users_search"])
            ? $validated["users_search"]
            // : $this->data["users"]->pluck("id")->toArray();
            : [Auth::user()->id];

        $user_leave = $this->data["users_leave"] = $this->getDataUser($user_select, $search_date);

        $search_date = Carbon::parse($search_date)->format('d-m-Y');
        $s_day = Carbon::createFromFormat('d-m-Y', $search_date)->format('d');
        $s_month = Carbon::createFromFormat('d-m-Y', $search_date)->format('m');
        $s_year = Carbon::createFromFormat('d-m-Y', $search_date)->format('Y');
        $startOfYear = Carbon::now()->firstOfYear();
        
        //lấy ra số ngày đi làm trong 1 năm (trừ t7 cn và các ngày lễ) 
        $workDaysOfYear = Cache::remember('users', 1000, function () use ($s_year) {
            $getEventCalendar = $this->getEventCalendar($s_year);
            $workDaysOfYear = [];
            for ($month = 1; $month <= 12; $month++) {
                $daysInMonth = Carbon::now()->month($month)->daysInMonth;
                for($days=1; $days <= $daysInMonth; $days++) {
                    //dd($today->dayOfWeek);
                    $date = Carbon::createFromFormat('Y-m-d', $s_year . '-' . $month . '-' . $days);
                    if($date->dayOfWeek != 0 && $date->dayOfWeek != 6){
                        //lọc bỏ các ngày nghỉ lễ
                        foreach($getEventCalendar as $item){
                            $startDate = Carbon::createFromFormat('Y-m-d', $item->StartDate);
                            $endDate = Carbon::createFromFormat('Y-m-d', $item->EndDate);
                            if($date->gte($startDate) && $date->lte($endDate)){
                                $flag = true;
                                break;
                            }else{
                                $flag = false;
                            }
                        }
                        if($flag == false){
                            $workDaysOfYear[] = Carbon::createFromDate($date->year, $month, $days)->format('Y-m-d');
                        }
                    }
                }
            }
            return $workDaysOfYear;
        });

        foreach ($user_leave as $user) {
            $ODate = $user->OfficialDate; //ngày kí hợp đồng chính thức
            //dd($ODate);
            $o_day = date('d', strtotime($ODate));
            $o_month = date('m', strtotime($ODate));
            $o_year = date('Y', strtotime($ODate));

            //lấy ra tgian còn tồn của năm ngoái
            $T_LastYear = Leave::query()
                ->where('UserID', $user->id)
                //->where('UserID', '225')
                ->where('DecisiveYear', ((int)$s_year - 1))
                ->select('TimeRemaining')
                ->first();
            if (!$T_LastYear) {
                $last_year_before = 0;
            } else {
                $last_year_before = $T_LastYear->TimeRemaining;
            }
            
            $time_available = $this_year_before = $this_year_after = $absence = $beyond_time = $no_timekeeping = $late_soon = 0;
            $last_year_after = $last_year_before;
            $AbsenceSearchMonth = 0;
            //dd($last_year_before);
            //dd($o_year);
            //nếu năm kí hđ = năm search thì sẽ trả về tháng ký hợp đồng ko thì sẽ trả về 1
            $start_month = ($o_year == $s_year) ? $o_month : 1;

            //nếu tháng search màng lớn hơn 6 thì reset tgian nghỉ phép của năm trước về 0
            if($s_month > 6){
                $last_year_before = 0;
                $last_year_after = 0;
            }

            $dataAbsenceByUserId = $this->getDataAbsenceByUserId($user->id, $search_date, $s_year == $o_year ? $ODate : $startOfYear);
            $dataTimeKeepingByUserId = $this->getSoonLateTime($user->id, $search_date, $s_year == $o_year ? $ODate : $startOfYear);
 
            $totalSoonLateTime = 0;

            $filterToGetSoonLateTime = [];
            foreach($dataTimeKeepingByUserId as $item){
                if(isset($item->late) && isset($item->soon)){
                    $totalSoonLateTime += ($item->late + $item->soon);
                }else if(isset($item->late)){
                    $totalSoonLateTime += $item->late;
                }else if(isset($item->soon)){
                    $totalSoonLateTime += $item->soon;
                }
            }

            /**
                đoạn code sửa tính ngày nghỉ phép cho đến thời điểm search
            */
            for ($month = $start_month; $month <= $s_month; $month++) {

                if($month != $s_month){
                    $this_year_before += 1;
                }else if($month == $s_month && $s_day > 15){
                    $this_year_before += 1;
                }
            }

            //lấy ra những ngày thực tế đi làm của từng user
            $workDaysByUserID = [];
            $ODatesCarbon = Carbon::createFromFormat('Y-m-d', $o_year . '-' . $o_month . '-' . $o_day);
            $SearchDatesCarbon = Carbon::createFromFormat('Y-m-d', $s_year . '-' . $s_month . '-' . $s_day);
            //dd($ODatesCarbon);
            foreach($workDaysOfYear as $item){
                $workDayCarbon = Carbon::createFromFormat('Y-m-d' ,$item);
                if($workDayCarbon->gte($ODatesCarbon) && $workDayCarbon->lte($SearchDatesCarbon)){
                    array_push($workDaysByUserID, $item);
                }
            }
            //dd($workDaysByUserID);

            //lấy ra hết ngày chấm công 
            $getTimeKeeping = $this->getTimeKeeping($user->id);
            foreach($getTimeKeeping as $item){
                $lstDayKeepping[] = $item->Date;
                //dd($item->Date);
            }

            //list những ngày phải đi làm nhưng không chấm công
            $listWork = [];
            //check xem những ngày phải đi làm nhưng lại ko có tgian chấm công
            foreach($workDaysByUserID as $item){
                //$workDayCarbon = Carbon::createFromFormat('Y-m-d', $item);
                if(in_array($item, $lstDayKeepping)){
                    //array_push($listWord, $item);
                }else{
                    array_push($listWork, $item);
                }
            }

            $allDayAbsence = [];
            //lấy ra hết ngày đã xin nghỉ phép
            $getTimeAbsence = $this->getTimeAbsence($user->id);
            foreach($getTimeAbsence as $item){
                //dd($item->SDate);
                $sDateConvert = Carbon::parse($item->SDate)->format('Y-m-d');
                $eDateConvert = Carbon::parse($item->EDate)->format('Y-m-d');

                $period = CarbonPeriod::create($sDateConvert, $eDateConvert);
                foreach($period as $item2){
                    array_push($allDayAbsence, $item2->format('Y-m-d'));
                }
            }

            $noTimeKeeping = [];
            //lọc những ngày phải đi làm ko chấm công với ngày đã đăng ký nghỉ phép
            foreach($listWork as $item){
                if(in_array($item, $allDayAbsence)){
                }else{
                    array_push($noTimeKeeping, $item);
                }
            }

            //với mỗi ngày phải đi làm nhưng ko có chấm công + 8h mỗi ngày
            foreach($noTimeKeeping as $item){
                $no_timekeeping += 8;
            }

            //nhân số ngày được nghỉ với 8 để lấy ra tổng tgian nghỉ phép
            $this_year_before *= 8;
     
            //tính số tgian phép còn lại cho tới hiện tại
            $calForBeyondAndTYearAfter = $this_year_before - ($dataAbsenceByUserId + $totalSoonLateTime);

            if($calForBeyondAndTYearAfter < 0){
                $beyond_time = $calForBeyondAndTYearAfter;
                $this_year_after = 0;
            }else{
                $this_year_after = $calForBeyondAndTYearAfter;
                $beyond_time = 0;
            }

            //dd($this_year_after);
            //dd($no_timekeeping);
            $user->beyond_time = $beyond_time;
            $user->last_year_before = $last_year_before;
            $user->last_year_after = $last_year_after;

            $user->this_year_before = $this_year_before;
            $user->this_year_after = $this_year_after;

            $user->AbsenceSearchMonth = $dataAbsenceByUserId;
            $user->no_timekeeping = $no_timekeeping;
            $user->late_soon = $totalSoonLateTime;

        }

        $this->data['export'] = $this->export;
        $this->data['lock'] = $this->lock;
        if (isset($validated["date"]) || isset($validated["users_search"])) {
            return view('leave::includes.leave-load', $this->data);
        }
        //dd($this->data['users_leave']);
        return view("leave::layouts.leave-list", $this->data);
    }

    public function getDataUser($users_search, $date)
    {
        $date = $date->format("Y-m-d");
        $users = User::query()
            ->select("id", "FullName", "OfficialDate", "SDate")
            ->where('deleted', '!=', 1)
            ->where('role_group', '!=', 1)
            ->where('Active', 1)
            ->whereIn("id", $users_search)
            ->orderBy("FullName")
            ->get();
        return $users;
    }

    public function absence(Request $request)
    {      
        $getOfficeYear = date('Y', strtotime($request['OfficeDate']));
        $startOfYear = Carbon::now()->firstOfYear();
        $getCurrentYear = date('Y', strtotime($startOfYear));

        $search_date = (null != $request['date'])
            ? $request['date']
            : Carbon::now();
        $userid = (null != $request['UserID'])
            ? $request['UserID']
            : Auth::user()->id;

        $getOfficeDate = $request['OfficeDate'];
        $s_month = date('m', strtotime($search_date));
        $s_year = date('Y', strtotime($search_date));

        //trường hợp năm ký HĐ cùng với năm search thì sẽ lấy dữ liệu từ ngày ký HĐ
        if($getOfficeYear == $getCurrentYear){
            $firstOfMonth = Carbon::parse(Carbon::parse($getOfficeDate)->firstOfMonth())->startOfDay();
        }else{
            $firstOfMonth = Carbon::parse(Carbon::parse($startOfYear)->firstOfMonth())->startOfDay();
        }


        $lastOfMonth = Carbon::parse(Carbon::parse($search_date))->endOfDay();
        $this->data['absenceLeave'] = Absence::query()->select('absences.*', 'master_data.Name')
            ->join('master_data', 'master_data.DataValue', 'absences.MasterDataValue')
            ->where('UID', '=', $userid)
            ->whereIn("absences.MasterDataValue", self::TYPE_ABSENCE)
            ->Where(function ($query) use ($firstOfMonth, $lastOfMonth) {
                $query->orWhereBetween('SDate', array($firstOfMonth, $lastOfMonth))
                    ->orWhereBetween('EDate', array($firstOfMonth, $lastOfMonth));
            })
            ->orWhere(function ($query) use ($search_date) {
                $query->where('SDate', '<=', Carbon::parse($search_date)->toDateString())
                    ->where('EDate', '>=', Carbon::parse($search_date)->toDateString());
            })
            ->where('UID', '=', $userid)
            ->orderBy('SDate','asc')
            ->get();
        $absenceLeave = $this->data['absenceLeave'];
        foreach ($absenceLeave as $absence) {
            $absence->SDate = Carbon::parse($absence->SDate)->format('d/m/Y H:i:s');
            $absence->EDate = Carbon::parse($absence->EDate)->format('d/m/Y H:i:s');
            $absence->TotalTimeOff = round(($absence->TotalTimeOff / self::MINUS_PER_HOUR), 2);
            // $timekeeping_data = TimekeepingNew::query()
            //     ->whereYear('Date', $s_year)
            //     ->whereMonth('Date', '<=', $s_month)
            //     ->where('UserID', $userid)
            //     ->where('Date', Carbon::parse($absence->SDate)->toDateString())
            //     ->first();
            $absence->errorReport = false;
            // if ($absence->MasterDataValue == 'VM003' && $timekeeping_data->TimeIn && $timekeeping_data->TimeOut) {
            //     if (Carbon::parse($timekeeping_data->Date . ' ' . $timekeeping_data->TimeIn)->gte(Carbon::parse($absence->EDate)->addHours(7))) {
            //         $absence->errorReport = true;
            //     }
            // }
            // if ($absence->MasterDataValue == 'VM004' && $timekeeping_data->TimeIn && $timekeeping_data->TimeOut) {
            //     if ((Carbon::parse($timekeeping_data->Date . ' ' . $timekeeping_data->TimeOut))->lte(Carbon::parse($absence->SDate)->addHours(7))) {
            //         $absence->errorReport = true;
            //     }
            // }
        }
        return view("leave::includes.absence-detail", $this->data);
    }

    public function getUnregisteredList(Request $request)
    {
        $getOfficeYear = date('Y', strtotime($request['OfficeDate']));
        $startOfYear = Carbon::now()->firstOfYear();
        // $getCurrentYear = date('Y', strtotime($startOfYear));
        $getOfficeDate = $request['OfficeDate'];

        $search_date = (null != $request['date']) ? Carbon::createFromDate($request->date) : Carbon::now();
        $UserID = (null != $request['UserID']) ? $request['UserID'] : Auth::user()->id;
        // $day = Carbon::parse($search_date)->format('d');
        // $month = Carbon::parse($search_date)->format('m');
        $year = Carbon::parse($search_date)->format('Y');

        $dataTimeKeepingByUserId = $this->getSoonLateTime($UserID, $search_date, $year == $getOfficeYear ? $getOfficeDate : $startOfYear);
        
        $filterToGetSoonLateTime = [];

        foreach($dataTimeKeepingByUserId as $item){
            if(isset($item->late) || isset($item->soon)){
                $item->TypeSelect = (null != $request['TypeSelect']) ? $request['TypeSelect'] : 1;               
                array_push($filterToGetSoonLateTime, $item);
            }
        }
        
        return view("leave::includes.late-soon-detail", compact('filterToGetSoonLateTime'));
    }

    public function getDataAbsenceByUserId($userid , $searchTime, $searchFrom){
        $totalAbsenceMinute = 0;
        $searchTimeNewFomat = Carbon::parse($searchTime)->format('Y-m-d H:i:s');
        //dd($newFomat);

        $getMonthFrom = date('m', strtotime($searchFrom));
        $getMonthTo = date('m', strtotime($searchTime));

        $data = DB::table('absences')
        ->select(['TotalTimeOff', 'AbsentDate'])
        ->where('UID', $userid)
        ->whereIn("MasterDataValue", self::TYPE_ABSENCE)
        ->Where(function($query) use ($searchFrom, $searchTimeNewFomat){
            $query->whereBetween('AbsentDate', array($searchFrom, $searchTimeNewFomat));
        })  
        ->get();

        //dd($data);
        foreach($data as $item){
            $totalAbsenceMinute += $item->TotalTimeOff;
        }
        $totalAbsenceHour = $totalAbsenceMinute / 60;
        return $totalAbsenceHour;
    }

    public function getSoonLateTime($userid, $searchTime, $searchFrom){
        $searchTimeNewFomat = Carbon::parse($searchTime)->format('Y-m-d H:i:s');

        $data = DB::table('timekeepings_new')
        ->select(['Date', 'TimeIn', 'TimeOut', 'STimeOfDay', 'ETimeOfDay','UserID'])
            ->where('UserID', $userid)
            ->Where(function($query) use ($searchFrom, $searchTimeNewFomat){
                $query->whereBetween('Date', array($searchFrom, $searchTimeNewFomat));
            })
            ->get();

        foreach($data as $item){
            //lấy ra h đi muộn
            if ($item->TimeIn != Null && Carbon::parse($item->TimeIn) > Carbon::parse($item->STimeOfDay)) {
                $item->late = round(Carbon::parse($item->TimeIn)->diffInSeconds(Carbon::parse($item->STimeOfDay)) / (60 * 60), 2);
            }
            //lấy ra h đi sớm
            if ($item->TimeOut != Null && Carbon::parse($item->TimeOut) < Carbon::parse($item->ETimeOfDay)) {
                $item->soon = round(Carbon::parse($item->TimeOut)->diffInSeconds(Carbon::parse($item->ETimeOfDay)) / (60 * 60), 2);
            }
        }
        return $data;
    }

    public function checkNoTimeKeeping($userId){
        /**
            Lấy ra số ngày chỉ đi làm trong năm
            + ko phải là t7, cn, và các ngày lễ
            + ko có ngày giờ đăng ký nghỉ phép
            + ngày đó ko có tgian check out và check in
            + ngày lấy ra phải nhỏ hơn ngày search hoặc ngày hiện tại và phải lớn hơn ngày ký HĐ hoặc mùng 1 đầu năm
         */
    }

    //lấy các ngày chấm công
    public function getTimeKeeping($userId){
        $getTimeKeeping = DB::table('timekeepings_new')
            ->select('Date','TimeIn', 'TimeOut')
            ->where('userid' , '=' ,$userId)
            ->get();
        return $getTimeKeeping;
    }

    //lấy các ngày đky nghỉ phép
    public function getTimeAbsence($userId){
        $getTimeAbsence = DB::table('absences')
            ->select('SDate','EDate', 'MasterDataValue')
            ->where('UID' , '=' ,$userId)
            ->get();
        return $getTimeAbsence;
    }

    //lấy các ngày nghỉ lễ trong năm
    public function getEventCalendar($s_year){
        $data = DB::table('calendar_events')
            ->select('StartDate', 'EndDate', 'Content')
            ->whereYear('StartDate', '=' ,$s_year)
            ->orderBy('StartDate','asc')
            ->get();
        return $data;
    }
}
